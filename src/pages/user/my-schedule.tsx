import { getSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import { DayPicker } from "react-day-picker";
import { AiOutlineCalendar, AiOutlineClose } from "react-icons/ai";
import { unfollowEvent } from "@/lib/utils";
import { useEffect } from "react";
import dayjs from "dayjs";
import isSameOrAfter from "dayjs/plugin/isSameOrAfter";
import { useSession } from "next-auth/react";
import { CATEGORIES_DICT } from "@/lib/variables";
import { StandardEventCard } from "@/components/cards";
import { useBackend, useWindow } from "@/hooks";
import cx from "classnames";
import { redirect } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import { useRouter } from "next/router";
import { FiltersContainer } from "@/components/complex/FiltersContainer";
import { UserThingsHeader } from "@/components/complex/UserThingsHeader";

interface userI {
  name?: string | null | undefined;
  id?: string | null | undefined;
  email?: string | null | undefined;
  phone_number?: string | null | undefined;
  social_networks?: string | null | undefined;
  image?: string | null | undefined;
  business_picture?: string | null;
  [x: string]: any;
}

dayjs.locale("es-do");
dayjs.extend(isSameOrAfter);

export async function getServerSideProps(context: { req: any }) {
  const session = await getSession({ req: context.req });
  // If the user is not authenticated, redirect to the home page
  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return { props: {} };
}

const MyScheduledEvents = () => {
  const { data: session, status } = useSession();
  const router = useRouter();

  if (status === "unauthenticated") {
    redirect("/");
  }
  const { get, destroy } = useBackend();
  const [feeType, setFeeType] = useState<string>("all");
  const [userInfo, setUserInfo] = useState<userI>();
  const [userEvents, setUserEvents] = useState<any>([]);
  const [dateSelected, setSpecificDate] = useState<Date>();
  const [highlightedDates, setHighlightedDates] = useState<Date[]>();
  const [showCalendar, toggleShowCalendar] = useState<boolean>(false);
  const { windowWidth, resolution } = useWindow();

  const categoryCounterMethod = (events: any) => {
    const categoryCountsArr: any = {};

    events.forEach((event: any, i: number) => {
      const category = CATEGORIES_DICT[event.category];

      // Check if the category already exists in the count object, and if not, initialize it to 1
      if (!categoryCountsArr[category]) {
        categoryCountsArr[category] = 1;
      } else {
        // If the category exists, increment the count by 1
        categoryCountsArr[category]++;
      }
    });
  };
  const getFollowedEvents = async (
    id: string,
    params?: {
      category?: string;
      entrance_format?: string;
    }
  ) => {
    try {
      console.log("getFollowedEvents", params);

      const { data, status } = await get(`/api/followed-events?user=${id}`, {
        params: {
          ...params,
        },
      });

      if (status === 200) {
        const arr = data.filter((item: any) =>
          dayjs(item.date).isSameOrAfter(dayjs(), "day")
        );

        const dates = arr.map((item: any) => new Date(item.date));
        setHighlightedDates([...dates]);
        categoryCounterMethod(arr);
        setUserEvents(arr);

        console.log({ arr });
      }
      return data;
    } catch (e) {
      console.log(e);
    }
  };

  const removeEventFromArray = (id: string) => {
    const arr = userEvents.filter((event: any) => event.id !== id);
    setUserEvents(arr);
    categoryCounterMethod(arr);
  };

  useEffect(() => {
    if (session?.user && session.user.name) {
      setUserInfo(session["user"]!);
    }
  }, [session]);

  useEffect(() => {
    let params = {};

    if (router.query) {
      console.log("1 router.query", router.query);
      const category = router.query.category as string;
      const entrance_format = router.query.price as string;
      const date = router.query.date as string;
      params = {
        category,
        entrance_format,
        date,
      };
    }

    if (userInfo && userInfo.id) {
      getFollowedEvents(userInfo?.id, params);
    }
  }, [router.query.category, router.query.price, router.query.date, userInfo]);

  return (
    <div>
      <Head>
        <title>Mi calendario de actividades - Encoro</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="robots" content="noindex" />
      </Head>

      <UserThingsHeader session={session} />

      <FiltersContainer useParams={true} showViewModeToggle={false} />

      <section className="bg-slate-100 pb-14">
        <div className="mx-auto container lg:px-0">
          <div className="py-8 lg:py-14">
            {userEvents.length > 0 ? (
              <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                {userEvents
                  .filter((event: any) => {
                    if (
                      dateSelected &&
                      !dayjs(event.date).isSameOrAfter(dateSelected, "day")
                    ) {
                      return false;
                    }
                    if (
                      feeType !== "all" &&
                      feeType !== event.entrance_format
                    ) {
                      return false;
                    }
                    return true;
                  })
                  .map((event: any, index: number) => (
                    <StandardEventCard
                      key={index}
                      displayDate
                      displayTime={false}
                      {...event}
                      canFollow={false}
                      image={event.media}
                      unfollowAction={() => {
                        if (userInfo?.id)
                          unfollowEvent(destroy, userInfo.id, event.id).then(
                            (res) => {
                              if (res.status === 200) {
                                removeEventFromArray(event.id);
                              }
                            }
                          );
                      }}
                    />
                  ))}
              </div>
            ) : (
              <div>
                <img
                  src="/images/illustration/no-agenda.svg"
                  className="mx-auto mb-8 w-full max-w-[200px] md:max-w-[400px]"
                />
                <h1 className="mb-4 text-center text-2xl font-semibold normal-case lg:mb-6">
                  No tienes eventos en agenda
                </h1>

                <p className="mb-0 text-center text-base font-light leading-normal text-slate-500 lg:text-2xl">
                  Actualmente no estas dando seguimiento a ningun evento.
                </p>
              </div>
            )}
          </div>
        </div>
      </section>

      <Button
        className={cx("filters-fab xl:hidden", { "z-[100]": showCalendar })}
        onClick={() => toggleShowCalendar(!showCalendar)}
      >
        {!showCalendar ? (
          <AiOutlineCalendar size={32} />
        ) : (
          <AiOutlineClose size={24} />
        )}
      </Button>

      <Sheet open={showCalendar} onOpenChange={toggleShowCalendar}>
        <SheetContent side="bottom" className="h-[80vh]">
          <SheetHeader>
            <SheetTitle>Filtrar por fecha</SheetTitle>
          </SheetHeader>

          <hr className="mb-8 border-slate-300 opacity-100" />
          <div className="rounded border border-slate-100 p-4">
            {highlightedDates && highlightedDates?.length > 0 && (
              <DayPicker
                mode="single"
                numberOfMonths={windowWidth >= resolution.sm ? 2 : 1}
                disabled={[{ before: new Date() }]}
                className="mx-auto block"
                selected={dateSelected}
                onSelect={setSpecificDate}
                modifiers={{
                  highlighted: highlightedDates,
                }}
                modifiersClassNames={{
                  highlighted: "highlighted-date",
                }}
              />
            )}
          </div>
        </SheetContent>
      </Sheet>
    </div>
  );
};

export default MyScheduledEvents;
